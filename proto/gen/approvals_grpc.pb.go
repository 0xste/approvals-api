// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: approvals.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApprovalService_GetUser_FullMethodName              = "/proto.ApprovalService/GetUser"
	ApprovalService_CreateUser_FullMethodName           = "/proto.ApprovalService/CreateUser"
	ApprovalService_GetRoles_FullMethodName             = "/proto.ApprovalService/GetRoles"
	ApprovalService_CreateRole_FullMethodName           = "/proto.ApprovalService/CreateRole"
	ApprovalService_GetRoleAssignments_FullMethodName   = "/proto.ApprovalService/GetRoleAssignments"
	ApprovalService_CreateRoleAssignment_FullMethodName = "/proto.ApprovalService/CreateRoleAssignment"
	ApprovalService_GetFunctions_FullMethodName         = "/proto.ApprovalService/GetFunctions"
	ApprovalService_CreateFunction_FullMethodName       = "/proto.ApprovalService/CreateFunction"
	ApprovalService_CreateApproval_FullMethodName       = "/proto.ApprovalService/CreateApproval"
	ApprovalService_ApproveApproval_FullMethodName      = "/proto.ApprovalService/ApproveApproval"
)

// ApprovalServiceClient is the client API for ApprovalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprovalServiceClient interface {
	// user management
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// roles
	GetRoles(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// role assignments
	GetRoleAssignments(ctx context.Context, in *GetRoleAssignmentRequest, opts ...grpc.CallOption) (*GetRoleAssignmentResponse, error)
	CreateRoleAssignment(ctx context.Context, in *CreateRoleAssignmentRequest, opts ...grpc.CallOption) (*CreateRoleAssignmentResponse, error)
	// functions
	GetFunctions(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error)
	CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error)
	// approvals
	CreateApproval(ctx context.Context, in *CreateApprovalRequest, opts ...grpc.CallOption) (*CreateApprovalResponse, error)
	ApproveApproval(ctx context.Context, in *ApproveApprovalRequest, opts ...grpc.CallOption) (*ApproveApprovalResponse, error)
}

type approvalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApprovalServiceClient(cc grpc.ClientConnInterface) ApprovalServiceClient {
	return &approvalServiceClient{cc}
}

func (c *approvalServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, ApprovalService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, ApprovalService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) GetRoles(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, ApprovalService_GetRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, ApprovalService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) GetRoleAssignments(ctx context.Context, in *GetRoleAssignmentRequest, opts ...grpc.CallOption) (*GetRoleAssignmentResponse, error) {
	out := new(GetRoleAssignmentResponse)
	err := c.cc.Invoke(ctx, ApprovalService_GetRoleAssignments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) CreateRoleAssignment(ctx context.Context, in *CreateRoleAssignmentRequest, opts ...grpc.CallOption) (*CreateRoleAssignmentResponse, error) {
	out := new(CreateRoleAssignmentResponse)
	err := c.cc.Invoke(ctx, ApprovalService_CreateRoleAssignment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) GetFunctions(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error) {
	out := new(GetFunctionResponse)
	err := c.cc.Invoke(ctx, ApprovalService_GetFunctions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error) {
	out := new(CreateFunctionResponse)
	err := c.cc.Invoke(ctx, ApprovalService_CreateFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) CreateApproval(ctx context.Context, in *CreateApprovalRequest, opts ...grpc.CallOption) (*CreateApprovalResponse, error) {
	out := new(CreateApprovalResponse)
	err := c.cc.Invoke(ctx, ApprovalService_CreateApproval_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ApproveApproval(ctx context.Context, in *ApproveApprovalRequest, opts ...grpc.CallOption) (*ApproveApprovalResponse, error) {
	out := new(ApproveApprovalResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ApproveApproval_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApprovalServiceServer is the server API for ApprovalService service.
// All implementations must embed UnimplementedApprovalServiceServer
// for forward compatibility
type ApprovalServiceServer interface {
	// user management
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// roles
	GetRoles(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// role assignments
	GetRoleAssignments(context.Context, *GetRoleAssignmentRequest) (*GetRoleAssignmentResponse, error)
	CreateRoleAssignment(context.Context, *CreateRoleAssignmentRequest) (*CreateRoleAssignmentResponse, error)
	// functions
	GetFunctions(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error)
	CreateFunction(context.Context, *CreateFunctionRequest) (*CreateFunctionResponse, error)
	// approvals
	CreateApproval(context.Context, *CreateApprovalRequest) (*CreateApprovalResponse, error)
	ApproveApproval(context.Context, *ApproveApprovalRequest) (*ApproveApprovalResponse, error)
	mustEmbedUnimplementedApprovalServiceServer()
}

// UnimplementedApprovalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApprovalServiceServer struct {
}

func (UnimplementedApprovalServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedApprovalServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedApprovalServiceServer) GetRoles(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedApprovalServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedApprovalServiceServer) GetRoleAssignments(context.Context, *GetRoleAssignmentRequest) (*GetRoleAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleAssignments not implemented")
}
func (UnimplementedApprovalServiceServer) CreateRoleAssignment(context.Context, *CreateRoleAssignmentRequest) (*CreateRoleAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleAssignment not implemented")
}
func (UnimplementedApprovalServiceServer) GetFunctions(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctions not implemented")
}
func (UnimplementedApprovalServiceServer) CreateFunction(context.Context, *CreateFunctionRequest) (*CreateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFunction not implemented")
}
func (UnimplementedApprovalServiceServer) CreateApproval(context.Context, *CreateApprovalRequest) (*CreateApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApproval not implemented")
}
func (UnimplementedApprovalServiceServer) ApproveApproval(context.Context, *ApproveApprovalRequest) (*ApproveApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveApproval not implemented")
}
func (UnimplementedApprovalServiceServer) mustEmbedUnimplementedApprovalServiceServer() {}

// UnsafeApprovalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprovalServiceServer will
// result in compilation errors.
type UnsafeApprovalServiceServer interface {
	mustEmbedUnimplementedApprovalServiceServer()
}

func RegisterApprovalServiceServer(s grpc.ServiceRegistrar, srv ApprovalServiceServer) {
	s.RegisterService(&ApprovalService_ServiceDesc, srv)
}

func _ApprovalService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_GetRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).GetRoles(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_GetRoleAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).GetRoleAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_GetRoleAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).GetRoleAssignments(ctx, req.(*GetRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_CreateRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).CreateRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_CreateRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).CreateRoleAssignment(ctx, req.(*CreateRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_GetFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).GetFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_GetFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).GetFunctions(ctx, req.(*GetFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_CreateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).CreateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_CreateFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).CreateFunction(ctx, req.(*CreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_CreateApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).CreateApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_CreateApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).CreateApproval(ctx, req.(*CreateApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ApproveApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ApproveApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ApproveApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ApproveApproval(ctx, req.(*ApproveApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApprovalService_ServiceDesc is the grpc.ServiceDesc for ApprovalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApprovalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ApprovalService",
	HandlerType: (*ApprovalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _ApprovalService_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ApprovalService_CreateUser_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _ApprovalService_GetRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _ApprovalService_CreateRole_Handler,
		},
		{
			MethodName: "GetRoleAssignments",
			Handler:    _ApprovalService_GetRoleAssignments_Handler,
		},
		{
			MethodName: "CreateRoleAssignment",
			Handler:    _ApprovalService_CreateRoleAssignment_Handler,
		},
		{
			MethodName: "GetFunctions",
			Handler:    _ApprovalService_GetFunctions_Handler,
		},
		{
			MethodName: "CreateFunction",
			Handler:    _ApprovalService_CreateFunction_Handler,
		},
		{
			MethodName: "CreateApproval",
			Handler:    _ApprovalService_CreateApproval_Handler,
		},
		{
			MethodName: "ApproveApproval",
			Handler:    _ApprovalService_ApproveApproval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "approvals.proto",
}
