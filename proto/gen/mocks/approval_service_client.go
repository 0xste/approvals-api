// Code generated by mockery v2.40.1. DO NOT EDIT.

package mock_proto

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/0xste/approvals-api/proto/gen"
)

// Mockapproval_service_client is an autogenerated mock type for the ApprovalServiceClient type
type Mockapproval_service_client struct {
	mock.Mock
}

type Mockapproval_service_client_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockapproval_service_client) EXPECT() *Mockapproval_service_client_Expecter {
	return &Mockapproval_service_client_Expecter{mock: &_m.Mock}
}

// ApproveApproval provides a mock function with given fields: ctx, in, opts
func (_m *Mockapproval_service_client) ApproveApproval(ctx context.Context, in *proto.ApproveApprovalRequest, opts ...grpc.CallOption) (*proto.ApproveApprovalResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApproveApproval")
	}

	var r0 *proto.ApproveApprovalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ApproveApprovalRequest, ...grpc.CallOption) (*proto.ApproveApprovalResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ApproveApprovalRequest, ...grpc.CallOption) *proto.ApproveApprovalResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ApproveApprovalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ApproveApprovalRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockapproval_service_client_ApproveApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApproveApproval'
type Mockapproval_service_client_ApproveApproval_Call struct {
	*mock.Call
}

// ApproveApproval is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ApproveApprovalRequest
//   - opts ...grpc.CallOption
func (_e *Mockapproval_service_client_Expecter) ApproveApproval(ctx interface{}, in interface{}, opts ...interface{}) *Mockapproval_service_client_ApproveApproval_Call {
	return &Mockapproval_service_client_ApproveApproval_Call{Call: _e.mock.On("ApproveApproval",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Mockapproval_service_client_ApproveApproval_Call) Run(run func(ctx context.Context, in *proto.ApproveApprovalRequest, opts ...grpc.CallOption)) *Mockapproval_service_client_ApproveApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.ApproveApprovalRequest), variadicArgs...)
	})
	return _c
}

func (_c *Mockapproval_service_client_ApproveApproval_Call) Return(_a0 *proto.ApproveApprovalResponse, _a1 error) *Mockapproval_service_client_ApproveApproval_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockapproval_service_client_ApproveApproval_Call) RunAndReturn(run func(context.Context, *proto.ApproveApprovalRequest, ...grpc.CallOption) (*proto.ApproveApprovalResponse, error)) *Mockapproval_service_client_ApproveApproval_Call {
	_c.Call.Return(run)
	return _c
}

// CreateApproval provides a mock function with given fields: ctx, in, opts
func (_m *Mockapproval_service_client) CreateApproval(ctx context.Context, in *proto.CreateApprovalRequest, opts ...grpc.CallOption) (*proto.CreateApprovalResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApproval")
	}

	var r0 *proto.CreateApprovalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateApprovalRequest, ...grpc.CallOption) (*proto.CreateApprovalResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateApprovalRequest, ...grpc.CallOption) *proto.CreateApprovalResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateApprovalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateApprovalRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockapproval_service_client_CreateApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateApproval'
type Mockapproval_service_client_CreateApproval_Call struct {
	*mock.Call
}

// CreateApproval is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateApprovalRequest
//   - opts ...grpc.CallOption
func (_e *Mockapproval_service_client_Expecter) CreateApproval(ctx interface{}, in interface{}, opts ...interface{}) *Mockapproval_service_client_CreateApproval_Call {
	return &Mockapproval_service_client_CreateApproval_Call{Call: _e.mock.On("CreateApproval",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Mockapproval_service_client_CreateApproval_Call) Run(run func(ctx context.Context, in *proto.CreateApprovalRequest, opts ...grpc.CallOption)) *Mockapproval_service_client_CreateApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CreateApprovalRequest), variadicArgs...)
	})
	return _c
}

func (_c *Mockapproval_service_client_CreateApproval_Call) Return(_a0 *proto.CreateApprovalResponse, _a1 error) *Mockapproval_service_client_CreateApproval_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockapproval_service_client_CreateApproval_Call) RunAndReturn(run func(context.Context, *proto.CreateApprovalRequest, ...grpc.CallOption) (*proto.CreateApprovalResponse, error)) *Mockapproval_service_client_CreateApproval_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunction provides a mock function with given fields: ctx, in, opts
func (_m *Mockapproval_service_client) CreateFunction(ctx context.Context, in *proto.CreateFunctionRequest, opts ...grpc.CallOption) (*proto.CreateFunctionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunction")
	}

	var r0 *proto.CreateFunctionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateFunctionRequest, ...grpc.CallOption) (*proto.CreateFunctionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateFunctionRequest, ...grpc.CallOption) *proto.CreateFunctionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateFunctionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateFunctionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockapproval_service_client_CreateFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunction'
type Mockapproval_service_client_CreateFunction_Call struct {
	*mock.Call
}

// CreateFunction is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateFunctionRequest
//   - opts ...grpc.CallOption
func (_e *Mockapproval_service_client_Expecter) CreateFunction(ctx interface{}, in interface{}, opts ...interface{}) *Mockapproval_service_client_CreateFunction_Call {
	return &Mockapproval_service_client_CreateFunction_Call{Call: _e.mock.On("CreateFunction",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Mockapproval_service_client_CreateFunction_Call) Run(run func(ctx context.Context, in *proto.CreateFunctionRequest, opts ...grpc.CallOption)) *Mockapproval_service_client_CreateFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CreateFunctionRequest), variadicArgs...)
	})
	return _c
}

func (_c *Mockapproval_service_client_CreateFunction_Call) Return(_a0 *proto.CreateFunctionResponse, _a1 error) *Mockapproval_service_client_CreateFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockapproval_service_client_CreateFunction_Call) RunAndReturn(run func(context.Context, *proto.CreateFunctionRequest, ...grpc.CallOption) (*proto.CreateFunctionResponse, error)) *Mockapproval_service_client_CreateFunction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: ctx, in, opts
func (_m *Mockapproval_service_client) CreateRole(ctx context.Context, in *proto.CreateRoleRequest, opts ...grpc.CallOption) (*proto.CreateRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 *proto.CreateRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateRoleRequest, ...grpc.CallOption) (*proto.CreateRoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateRoleRequest, ...grpc.CallOption) *proto.CreateRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockapproval_service_client_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type Mockapproval_service_client_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateRoleRequest
//   - opts ...grpc.CallOption
func (_e *Mockapproval_service_client_Expecter) CreateRole(ctx interface{}, in interface{}, opts ...interface{}) *Mockapproval_service_client_CreateRole_Call {
	return &Mockapproval_service_client_CreateRole_Call{Call: _e.mock.On("CreateRole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Mockapproval_service_client_CreateRole_Call) Run(run func(ctx context.Context, in *proto.CreateRoleRequest, opts ...grpc.CallOption)) *Mockapproval_service_client_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CreateRoleRequest), variadicArgs...)
	})
	return _c
}

func (_c *Mockapproval_service_client_CreateRole_Call) Return(_a0 *proto.CreateRoleResponse, _a1 error) *Mockapproval_service_client_CreateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockapproval_service_client_CreateRole_Call) RunAndReturn(run func(context.Context, *proto.CreateRoleRequest, ...grpc.CallOption) (*proto.CreateRoleResponse, error)) *Mockapproval_service_client_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoleAssignment provides a mock function with given fields: ctx, in, opts
func (_m *Mockapproval_service_client) CreateRoleAssignment(ctx context.Context, in *proto.CreateRoleAssignmentRequest, opts ...grpc.CallOption) (*proto.CreateRoleAssignmentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleAssignment")
	}

	var r0 *proto.CreateRoleAssignmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateRoleAssignmentRequest, ...grpc.CallOption) (*proto.CreateRoleAssignmentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateRoleAssignmentRequest, ...grpc.CallOption) *proto.CreateRoleAssignmentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateRoleAssignmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateRoleAssignmentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockapproval_service_client_CreateRoleAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoleAssignment'
type Mockapproval_service_client_CreateRoleAssignment_Call struct {
	*mock.Call
}

// CreateRoleAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateRoleAssignmentRequest
//   - opts ...grpc.CallOption
func (_e *Mockapproval_service_client_Expecter) CreateRoleAssignment(ctx interface{}, in interface{}, opts ...interface{}) *Mockapproval_service_client_CreateRoleAssignment_Call {
	return &Mockapproval_service_client_CreateRoleAssignment_Call{Call: _e.mock.On("CreateRoleAssignment",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Mockapproval_service_client_CreateRoleAssignment_Call) Run(run func(ctx context.Context, in *proto.CreateRoleAssignmentRequest, opts ...grpc.CallOption)) *Mockapproval_service_client_CreateRoleAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CreateRoleAssignmentRequest), variadicArgs...)
	})
	return _c
}

func (_c *Mockapproval_service_client_CreateRoleAssignment_Call) Return(_a0 *proto.CreateRoleAssignmentResponse, _a1 error) *Mockapproval_service_client_CreateRoleAssignment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockapproval_service_client_CreateRoleAssignment_Call) RunAndReturn(run func(context.Context, *proto.CreateRoleAssignmentRequest, ...grpc.CallOption) (*proto.CreateRoleAssignmentResponse, error)) *Mockapproval_service_client_CreateRoleAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *Mockapproval_service_client) CreateUser(ctx context.Context, in *proto.CreateUserRequest, opts ...grpc.CallOption) (*proto.CreateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *proto.CreateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateUserRequest, ...grpc.CallOption) (*proto.CreateUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateUserRequest, ...grpc.CallOption) *proto.CreateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockapproval_service_client_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Mockapproval_service_client_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateUserRequest
//   - opts ...grpc.CallOption
func (_e *Mockapproval_service_client_Expecter) CreateUser(ctx interface{}, in interface{}, opts ...interface{}) *Mockapproval_service_client_CreateUser_Call {
	return &Mockapproval_service_client_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Mockapproval_service_client_CreateUser_Call) Run(run func(ctx context.Context, in *proto.CreateUserRequest, opts ...grpc.CallOption)) *Mockapproval_service_client_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CreateUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *Mockapproval_service_client_CreateUser_Call) Return(_a0 *proto.CreateUserResponse, _a1 error) *Mockapproval_service_client_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockapproval_service_client_CreateUser_Call) RunAndReturn(run func(context.Context, *proto.CreateUserRequest, ...grpc.CallOption) (*proto.CreateUserResponse, error)) *Mockapproval_service_client_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctions provides a mock function with given fields: ctx, in, opts
func (_m *Mockapproval_service_client) GetFunctions(ctx context.Context, in *proto.GetFunctionRequest, opts ...grpc.CallOption) (*proto.GetFunctionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctions")
	}

	var r0 *proto.GetFunctionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetFunctionRequest, ...grpc.CallOption) (*proto.GetFunctionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetFunctionRequest, ...grpc.CallOption) *proto.GetFunctionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetFunctionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetFunctionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockapproval_service_client_GetFunctions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctions'
type Mockapproval_service_client_GetFunctions_Call struct {
	*mock.Call
}

// GetFunctions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetFunctionRequest
//   - opts ...grpc.CallOption
func (_e *Mockapproval_service_client_Expecter) GetFunctions(ctx interface{}, in interface{}, opts ...interface{}) *Mockapproval_service_client_GetFunctions_Call {
	return &Mockapproval_service_client_GetFunctions_Call{Call: _e.mock.On("GetFunctions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Mockapproval_service_client_GetFunctions_Call) Run(run func(ctx context.Context, in *proto.GetFunctionRequest, opts ...grpc.CallOption)) *Mockapproval_service_client_GetFunctions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.GetFunctionRequest), variadicArgs...)
	})
	return _c
}

func (_c *Mockapproval_service_client_GetFunctions_Call) Return(_a0 *proto.GetFunctionResponse, _a1 error) *Mockapproval_service_client_GetFunctions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockapproval_service_client_GetFunctions_Call) RunAndReturn(run func(context.Context, *proto.GetFunctionRequest, ...grpc.CallOption) (*proto.GetFunctionResponse, error)) *Mockapproval_service_client_GetFunctions_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleAssignments provides a mock function with given fields: ctx, in, opts
func (_m *Mockapproval_service_client) GetRoleAssignments(ctx context.Context, in *proto.GetRoleAssignmentRequest, opts ...grpc.CallOption) (*proto.GetRoleAssignmentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleAssignments")
	}

	var r0 *proto.GetRoleAssignmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetRoleAssignmentRequest, ...grpc.CallOption) (*proto.GetRoleAssignmentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetRoleAssignmentRequest, ...grpc.CallOption) *proto.GetRoleAssignmentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetRoleAssignmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetRoleAssignmentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockapproval_service_client_GetRoleAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleAssignments'
type Mockapproval_service_client_GetRoleAssignments_Call struct {
	*mock.Call
}

// GetRoleAssignments is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetRoleAssignmentRequest
//   - opts ...grpc.CallOption
func (_e *Mockapproval_service_client_Expecter) GetRoleAssignments(ctx interface{}, in interface{}, opts ...interface{}) *Mockapproval_service_client_GetRoleAssignments_Call {
	return &Mockapproval_service_client_GetRoleAssignments_Call{Call: _e.mock.On("GetRoleAssignments",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Mockapproval_service_client_GetRoleAssignments_Call) Run(run func(ctx context.Context, in *proto.GetRoleAssignmentRequest, opts ...grpc.CallOption)) *Mockapproval_service_client_GetRoleAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.GetRoleAssignmentRequest), variadicArgs...)
	})
	return _c
}

func (_c *Mockapproval_service_client_GetRoleAssignments_Call) Return(_a0 *proto.GetRoleAssignmentResponse, _a1 error) *Mockapproval_service_client_GetRoleAssignments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockapproval_service_client_GetRoleAssignments_Call) RunAndReturn(run func(context.Context, *proto.GetRoleAssignmentRequest, ...grpc.CallOption) (*proto.GetRoleAssignmentResponse, error)) *Mockapproval_service_client_GetRoleAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with given fields: ctx, in, opts
func (_m *Mockapproval_service_client) GetRoles(ctx context.Context, in *proto.GetRoleRequest, opts ...grpc.CallOption) (*proto.GetRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoles")
	}

	var r0 *proto.GetRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetRoleRequest, ...grpc.CallOption) (*proto.GetRoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetRoleRequest, ...grpc.CallOption) *proto.GetRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockapproval_service_client_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type Mockapproval_service_client_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetRoleRequest
//   - opts ...grpc.CallOption
func (_e *Mockapproval_service_client_Expecter) GetRoles(ctx interface{}, in interface{}, opts ...interface{}) *Mockapproval_service_client_GetRoles_Call {
	return &Mockapproval_service_client_GetRoles_Call{Call: _e.mock.On("GetRoles",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Mockapproval_service_client_GetRoles_Call) Run(run func(ctx context.Context, in *proto.GetRoleRequest, opts ...grpc.CallOption)) *Mockapproval_service_client_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.GetRoleRequest), variadicArgs...)
	})
	return _c
}

func (_c *Mockapproval_service_client_GetRoles_Call) Return(_a0 *proto.GetRoleResponse, _a1 error) *Mockapproval_service_client_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockapproval_service_client_GetRoles_Call) RunAndReturn(run func(context.Context, *proto.GetRoleRequest, ...grpc.CallOption) (*proto.GetRoleResponse, error)) *Mockapproval_service_client_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, in, opts
func (_m *Mockapproval_service_client) GetUser(ctx context.Context, in *proto.GetUserRequest, opts ...grpc.CallOption) (*proto.GetUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *proto.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserRequest, ...grpc.CallOption) (*proto.GetUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserRequest, ...grpc.CallOption) *proto.GetUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockapproval_service_client_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type Mockapproval_service_client_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetUserRequest
//   - opts ...grpc.CallOption
func (_e *Mockapproval_service_client_Expecter) GetUser(ctx interface{}, in interface{}, opts ...interface{}) *Mockapproval_service_client_GetUser_Call {
	return &Mockapproval_service_client_GetUser_Call{Call: _e.mock.On("GetUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Mockapproval_service_client_GetUser_Call) Run(run func(ctx context.Context, in *proto.GetUserRequest, opts ...grpc.CallOption)) *Mockapproval_service_client_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.GetUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *Mockapproval_service_client_GetUser_Call) Return(_a0 *proto.GetUserResponse, _a1 error) *Mockapproval_service_client_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockapproval_service_client_GetUser_Call) RunAndReturn(run func(context.Context, *proto.GetUserRequest, ...grpc.CallOption) (*proto.GetUserResponse, error)) *Mockapproval_service_client_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockapproval_service_client creates a new instance of Mockapproval_service_client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockapproval_service_client(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockapproval_service_client {
	mock := &Mockapproval_service_client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
